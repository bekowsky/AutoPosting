//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MasterServcie.ServiceImg {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceImg.IServiceImg")]
    public interface IServiceImg {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/TakeHtml", ReplyAction="http://tempuri.org/IServiceImg/TakeHtmlResponse")]
        string TakeHtml(string Word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/TakeHtml", ReplyAction="http://tempuri.org/IServiceImg/TakeHtmlResponse")]
        System.Threading.Tasks.Task<string> TakeHtmlAsync(string Word);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/ParseHtml", ReplyAction="http://tempuri.org/IServiceImg/ParseHtmlResponse")]
        string[] ParseHtml(string Html, int Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/ParseHtml", ReplyAction="http://tempuri.org/IServiceImg/ParseHtmlResponse")]
        System.Threading.Tasks.Task<string[]> ParseHtmlAsync(string Html, int Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/TakeLink", ReplyAction="http://tempuri.org/IServiceImg/TakeLinkResponse")]
        string TakeLink(string Word, int Count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceImg/TakeLink", ReplyAction="http://tempuri.org/IServiceImg/TakeLinkResponse")]
        System.Threading.Tasks.Task<string> TakeLinkAsync(string Word, int Count);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceImgChannel : MasterServcie.ServiceImg.IServiceImg, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceImgClient : System.ServiceModel.ClientBase<MasterServcie.ServiceImg.IServiceImg>, MasterServcie.ServiceImg.IServiceImg {
        
        public ServiceImgClient() {
        }
        
        public ServiceImgClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceImgClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImgClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceImgClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TakeHtml(string Word) {
            return base.Channel.TakeHtml(Word);
        }
        
        public System.Threading.Tasks.Task<string> TakeHtmlAsync(string Word) {
            return base.Channel.TakeHtmlAsync(Word);
        }
        
        public string[] ParseHtml(string Html, int Count) {
            return base.Channel.ParseHtml(Html, Count);
        }
        
        public System.Threading.Tasks.Task<string[]> ParseHtmlAsync(string Html, int Count) {
            return base.Channel.ParseHtmlAsync(Html, Count);
        }
        
        public string TakeLink(string Word, int Count) {
            return base.Channel.TakeLink(Word, Count);
        }
        
        public System.Threading.Tasks.Task<string> TakeLinkAsync(string Word, int Count) {
            return base.Channel.TakeLinkAsync(Word, Count);
        }
    }
}
